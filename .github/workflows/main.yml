name: Android 9 + KasmVNC (Fixed Build + Cloudflare)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    env:
      IMAGE_NAME: android9-kasmvnc-final
      CONTAINER_NAME: android9
      PORT: 6901
      RAM_MB: 4096
      CPU_CORES: 4

    steps:
      - name: üß© Checkout repository
        uses: actions/checkout@v4

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üß± Build Android 9 + KasmVNC image
        run: |
          cat <<'EOF' > Dockerfile
          FROM kasmweb/core-ubuntu-focal:1.14.0

          USER root
          ENV DEBIAN_FRONTEND=noninteractive
          ENV ANDROID_SDK_ROOT=/opt/android-sdk

          RUN apt-get update && apt-get install -y curl unzip openjdk-11-jdk qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils && \
              mkdir -p $ANDROID_SDK_ROOT && cd $ANDROID_SDK_ROOT && \
              curl -o cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip && \
              mkdir -p cmdline-tools && unzip cmdline-tools.zip -d cmdline-tools && rm cmdline-tools.zip && \
              mkdir -p $ANDROID_SDK_ROOT/cmdline-tools/latest && \
              mv $ANDROID_SDK_ROOT/cmdline-tools/* $ANDROID_SDK_ROOT/cmdline-tools/latest/ || true && \
              yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT "platform-tools" "emulator" "system-images;android-28;google_apis;x86_64" && \
              yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses && \
              echo "no" | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager create avd -n test -k "system-images;android-28;google_apis;x86_64" -d "pixel"

          EXPOSE 6901

          CMD bash -c "/usr/bin/start-kasmvnc --skip-cert-check & \
                       sleep 10 && \
                       /opt/android-sdk/emulator/emulator -avd test \
                         -memory ${RAM_MB:-4096} \
                         -cores ${CPU_CORES:-4} \
                         -gpu swiftshader_indirect \
                         -noaudio \
                         -no-boot-anim \
                         -no-snapshot \
                         -accel off \
                         -netdelay none \
                         -netspeed full"
          EOF

          docker build --no-cache -t $IMAGE_NAME .

      - name: üöÄ Run Android container
        run: |
          docker run -d \
            --name $CONTAINER_NAME \
            -p $PORT:6901 \
            -e VNC_PW=123456 \
            -e DISPLAY_WIDTH=1280 \
            -e DISPLAY_HEIGHT=720 \
            $IMAGE_NAME

      - name: üåê Download Cloudflared
        run: |
          curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o cloudflared
          chmod +x cloudflared

      - name: ‚òÅÔ∏è Start Cloudflare Tunnel
        id: tunnel
        run: |
          nohup ./cloudflared tunnel --url http://localhost:${PORT} --no-autoupdate > tunnel.log 2>&1 &
          for i in {1..120}; do
            URL=$(grep -oE 'https://[a-zA-Z0-9-]+\.trycloudflare\.com' tunnel.log | head -1 || true)
            if [ -n "$URL" ]; then
              echo "url=$URL" >> $GITHUB_OUTPUT
              echo "Public URL: $URL"
              break
            fi
            sleep 1
          done
          if [ -z "$URL" ]; then
            echo "Failed to obtain Cloudflare URL"
            exit 1
          fi

      - name: üîó Show public URL
        run: |
          echo "======================================"
          echo "Truy c·∫≠p Android 9 t·∫°i:"
          echo "${{ steps.tunnel.outputs.url }}"
          echo "M·∫≠t kh·∫©u VNC: 123456"
          echo "======================================"

      - name: üïì Keep Alive (6h)
        run: sleep 21600
